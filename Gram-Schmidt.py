def Gram_Schmidt(n, B):
    GS = Matrix(RR, n)
    U = Matrix(RR, n)

    for i in range(n):
        GS[i] = B[i]
        U[i, i] = 1.0
        for j in range(i):
            U[i, j] = B[i].inner_product(GS[j])/(GS[j].norm()**2)
            GS[i] = GS[i] - ( U[i, j] * GS[j] )
    return GS, U



B1 = Matrix(ZZ, [[8, 24, -30, 38],
                [-43, -61, -7, 4],
                [-23, -13, 59, 23],
                [41, -58, 27, 21]])
B2 = Matrix(ZZ, [[11, 1, 25, -29, -6],
                 [16, 15, -22, 21, -20],
                 [-22, -13, 20, -16, 2],
                 [-14, -27, 27, 9, -21],
                 [-5, -2, 15, 24, 24]])
'''
B に対する GSO ベクトル行列 と GSO 係数行列
'''
print('4 * 4の基底行列B1')
n = 4
print('B1= ', B1)
GS, U = Gram_Schmidt(n, B1)
print('B1 - U * GS = ', B1 - U * GS)

print('5 * 5の基底行列B2')
n = 5
print('B2 = ', B2)
GS, U = Gram_Schmidt(5, B2)
print('B2 - U * GS = ', B2 - U * GS)

'''
output
4 * 4の基底行列B1
B1=  [  8  24 -30  38]
[-43 -61  -7   4]
[-23 -13  59  23]
[ 41 -58  27  21]
B1 - U * GS =  [    0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000]
[    0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000]
[    0.000000000000000     0.000000000000000     0.000000000000000  7.10542735760100e-15]
[    0.000000000000000 -7.10542735760100e-15     0.000000000000000     0.000000000000000]
5 * 5の基底行列B2
B2 =  [ 11   1  25 -29  -6]
[ 16  15 -22  21 -20]
[-22 -13  20 -16   2]
[-14 -27  27   9 -21]
[ -5  -2  15  24  24]
B2 - U * GS =  [    0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000]
[    0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000]
[    0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000     0.000000000000000]
[-1.77635683940025e-15 -3.55271367880050e-15     0.000000000000000     0.000000000000000     0.000000000000000]
[    0.000000000000000 -1.77635683940025e-15 -1.77635683940025e-15     0.000000000000000     0.000000000000000]

'''